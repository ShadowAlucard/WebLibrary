@page "/library-members"
@using Library_Contract
@using Librarian_Blazor.Services

@inject ILibraryMemberService libraryMemberService
@inject ILoanService loanService

<PageTitle>Librarian - Library Members</PageTitle>

<h3>Members of the Library</h3>

@if(members is null)
{
	<PageTitle>Librarian - Loading books data...</PageTitle>
	<p>Loading data...</p>
}
else
{
	<PageTitle>Librarian - Library Books</PageTitle>
	<table class="table table-bordered table-hover">
        <thead>
        <tr>
            <th>Full Name</th>
            <th>Reader Number</th>
            <th>Borrowed Books</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var member in members)
        {
            <tr>
                <td>@member.Name</td>
                <td>@member.ReaderNumber</td>
                <td>@(membersBorrowedBookCount is not null ? membersBorrowedBookCount[member] : "?")</td>
                <td><a href="library-members/member/@member.Id" class="btn btn-primary">More</a></td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IEnumerable<LibraryMember>? members { get; set; }
    private Dictionary<LibraryMember, int>? membersBorrowedBookCount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        members = await libraryMemberService.GetAllLibraryMembersAsync();

        if (members is null)
            return;

        membersBorrowedBookCount = await GetAllMemberBorrowCount();
    }

    private async Task<Dictionary<LibraryMember,int>?> GetAllMemberBorrowCount()
    {
        Dictionary<LibraryMember, int> result = new();

        if (members is null)
            return null;

        foreach (var member in members)
        {
            IEnumerable<Loan>? loans = await loanService.GetAllLoansByMemberNumberAsync(member.ReaderNumber);
            if (loans is null)
            {
                result[member] = 0;
                continue;
            }
            else
            {
                int counter = 0;
                foreach (var loan in loans)
                {
                    if (loan.ReturnDate is null)
                        counter++;
                }
                result[member] = counter;
            }
        }

        return result;
    }
}