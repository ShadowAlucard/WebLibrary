@page "/library-books/book/{id:int}"
@using Librarian_Blazor.Services
@using Library_Contract

@inject IBookService bookService
@inject ILoanService loanService
@inject ILibraryMemberService libraryMemberService
@inject NavigationManager navManager

@if(book is null)
{
	<PageTitle>Librarian - Loading book data...</PageTitle>
	<p>Loading data...</p>
}
else
{
	<PageTitle>Librarian - @book.Title book's details</PageTitle>

	<h3>@book.Title</h3>

	<table class="h5">
		<tr>
			<th class="small text-muted pr-2" scope="row">Title</th>
			<td>@book.Title</td>
		</tr>
		<tr>
			<th class="small text-muted pr-2" scope="row">Author</th>
			<td>@book.Author</td>
		</tr>
		<tr>
			<th class="small text-muted pr-2" scope="row">Publisher</th>
			<td>@book.Publisher</td>
		</tr>
		<tr>
			<th class="small text-muted pr-2" scope="row">Publication Year</th>
			<td>@book.PublicationYear</td>
		</tr>
		<tr>
			<th class="small text-muted pr-2" scope="row">Inventory Number</th>
			<td>@book.InventoryNumber</td>
		</tr>
		@if (book.IsBorrowed is true)
		{
			<tr>
				<th class="small text-muted pr-2" scope="row">Status</th>
				<td class="text-danger">Borrowed</td>
			</tr>
			<tr>
				<th class="small text-muted pr-2" scope="row">Borrowed By</th>
				<td><a href="/library-members/member/@borrowedBy.Id" class="btn btn-primary mb-3">@borrowedBy.Name</a></td>
			</tr>
		}
		else
		{
			<tr>
				<th class="small text-muted pr-2" scope="row">Status</th>
				<td class="text-success">Avalible</td>
			</tr>
		}

	</table>
}
<button @onclick="@OnBackButton" class=" bnt btn-primary form-control">Back</button>

@code {
	[Parameter]
	public int Id { get; set; }

	private Book? book { get; set; }

	private LibraryMember? borrowedBy { get; set; }

	protected override async Task OnInitializedAsync()
	{
		book = await bookService.GetBookByIdAsync(Id);

		if (book is null || book.IsBorrowed is false)
			return;

		// Get the member who borrowed the book
		var a_lib_m = await libraryMemberService.GetAllLibraryMembersAsync();

		if (a_lib_m is null)
			return;

		var a_loan = await loanService.GetAllLoansAsync();

		if (a_loan is null)
			return;

		string loan_readerNumber = a_loan.First(l => l.InventoryNumber.Equals(book.InventoryNumber)).ReaderNumber;

		borrowedBy = a_lib_m.First(m => m.ReaderNumber == loan_readerNumber);
	}

	private async Task OnBackButton()
	{
		navManager.NavigateTo("/library-books");
	}
}
