@page "/library-members/member/{id:int}"
@using Librarian_Blazor.Services
@using Library_Contract
@using System.Linq

@inject IBookService bookService
@inject ILibraryMemberService libraryMemberService
@inject ILoanService loanService
@inject NavigationManager navManager

@if(member is null)
{
	<PageTitle>Librarian - Loading member data...</PageTitle>
	<p>Loading data...</p>
}
else
{
	<PageTitle>Librarian - @member.Name's details</PageTitle>

	#region Member Details
	
	<h3>@member.Name's details</h3>

	<table class="h5">
		<tr>
			<th class="small text-muted pr-2" scope="row">Name</th>
			<td>@member.Name</td>
		</tr>
		<tr>
			<th class="small text-muted pr-2" scope="row">Age</th>
			<td>@(((DateTime.Today - member.BirthDate).TotalDays / 365.25).ToString("0"))</td>
		</tr>
		<tr>
			<th class="small text-muted pr-2" scope="row">Birth date</th>
			<td>@member.BirthDate.ToShortDateString()</td>
		</tr>
		<tr>
			<th class="small text-muted pr-2" scope="row">Address</th>
			<td>@member.Address</td>
		</tr>
		<tr>
			<th class="small text-muted pr-2" scope="row">Reader Number</th>
			<td>@member.ReaderNumber</td>
		</tr>
	</table>

	<a href="library-members/edit/@Id" class=" btn btn-success mb-3">Edit Data</a>
	
	#endregion
	
	#region Loan History

	<h3>Active Loans</h3>
	@if(membersLoanHistory is null)
	{
		<p>Loading data...</p>
	}
	else if(membersLoanHistory.Any() is false)
	{
		<h5>Member does not have any active loans.</h5>
	}
	else
	{
		<table class="table table-bordered table-hover">
        <thead>
        <tr>
            <th>Inventory Number</th>
			<th>Borrowed</th>
            <th>Deadline</th>
            <th>Returned</th>
			<th>Status</th>
			<th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var loan in membersLoanHistory)
        {
            <tr>
                <td>@loan.InventoryNumber</td>
				<td>@loan.LoanDate.ToShortDateString()</td>
                <td>@loan.ReturnDeadline.ToShortDateString()</td>
				<td>@(loan.ReturnDate.HasValue ? loan.ReturnDate.Value.ToShortDateString() : "-")</td>
                @if(loan.ReturnDate is null)
				{
					if (DateTime.Now > loan.ReturnDeadline)
					{
						<td class="text-danger">Not Returned</td>
					}
					else
					{
						<td>On Loan</td>
					}
                }
				else if (loan.ReturnDate > loan.ReturnDeadline)
				{
					<td class="text-warning">Late Return</td>
				}
				else
				{
                    <td class="text-success">Returned</td>
                }
				@if(loan.ReturnDate is null)
				{
					<td><button @onclick="() => OnReturnBookButton(loan)" class="btn btn-primary">Return</button></td>
				}
			</tr>
        }
        </tbody>
    </table>
	}
	#endregion

	#region Register Books
	
	<h3>Borrow Book</h3>
	@if(books is null)
	{
		<p>Loading data...</p>
	}
	else
	{
		<table class="table table-bordered table-hover">
			<thead>
				<tr>
					<th>Title</th>	
					<th>Author</th>
					<th>Publisher</th>
					<th>Publication Year</th>
					<th>Inventory Number</th>
					<th>Status</th>
					<th>Borrow</th>
					<th>More</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var book in books)
				{
					<tr>
						<td>@book.Title</td>
						<td>@book.Author</td>
						<td>@book.Publisher</td>
						<td>@book.PublicationYear</td>
						<td>@book.InventoryNumber</td>
						@if(book.IsBorrowed is true)
						{
							<td class="text-danger">Borrowed</td>
							<td></td>
						}
						else
						{
							<td class="text-success">Avalible</td>
							<td><button @onclick="() => OnBorrowBookAsync(member,book)" class="btn btn-success">Borrow</button></td>
						}
					<td><a href="library-books/book/@book.Id" class="btn btn-primary">More</a></td>
					</tr>
				}
			</tbody>
		</table>
	}
	#endregion
}
<button @onclick="@OnBackButton" class=" btn btn-primary form-control mb-3">Back</button>

@code {
	[Parameter]
	public int Id { get; set; }

	public LibraryMember? member { get; set; }

	private IEnumerable<Book>? books { get; set; }

	private IEnumerable<Loan>? membersLoanHistory { get; set; }

	protected override async Task OnInitializedAsync()
	{
		member = await libraryMemberService.GetLibraryMemberByIdAsync(Id);

		if (member is null)
			return;

		membersLoanHistory = await loanService.GetAllLoansByMemberNumberAsync(member.ReaderNumber);

		books = await bookService.GetAllBooksAsync();
	}

	private void OnBackButton()
	{
		navManager.NavigateTo("/library-members");
	}

	private async Task OnReturnBookButton(Loan loan) 
	{
		var book = await bookService.GetBookByInventoryNumberAsync(loan.InventoryNumber);

		if (book is null)
			throw new NullReferenceException("No book exist with the matching InventoryNumber");

		book.IsBorrowed = false;
		await bookService.UpdateBookAsync(book.Id, book);

		loan.ReturnDate = DateTime.Today;
		await loanService.ReturnAsync(loan.Id);
		await loanService.DeleteLoanAsync(loan.Id);
	}

	private async Task OnBorrowBookAsync(LibraryMember member, Book book)
	{
		book.IsBorrowed = true;

		var loan = new Loan
		{
			ReaderNumber = member.ReaderNumber,
			InventoryNumber = book.InventoryNumber,
			LoanDate = DateTime.Today,
			ReturnDeadline = DateTime.Today.AddMonths(3),
			ReturnDate = null
		};

		Console.WriteLine(loan.ReaderNumber);
		Console.WriteLine(loan.InventoryNumber);

		await loanService.AddLoanAsync(loan);
		membersLoanHistory?.Append(loan);

		await bookService.UpdateBookAsync(book.Id, book);
	}
}
