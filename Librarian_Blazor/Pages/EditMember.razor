@page "/library-members/edit/{id:int}"

@using Library_Contract
@using Librarian_Blazor.Services

@inject ILibraryMemberService libraryMemberService
@inject ILoanService loanService
@inject NavigationManager navManager
@inject IJSRuntime jsRuntime

@if(member is null)
{
	<p>Loading data...</p>
}
else
{
	<h3>Edit @member.Name's data</h3>

	<MemberForm model="@member" formType="MemberFormType.Edit" HandleValidSubminAsync="@HandleValidSubminAsync"/>

	<button @onclick="@OnDeleteButton" class="btn btn-danger form-control mb-3">Delete</button>

	<a href="/library-members/member/@Id" class="btn btn-primary form-control">Cancel</a>
}

@code {
	[Parameter]
	public int Id { get; set; }

	private LibraryMember? member { get; set; }

	protected override async Task OnInitializedAsync()
	{
		member = await libraryMemberService.GetLibraryMemberByIdAsync(Id);
	}

	private async Task HandleValidSubminAsync()
	{
		await libraryMemberService.UpdateLibraryMemberAsync(Id, member);
		navManager.NavigateTo("library-members");
	}

	private async Task OnDeleteButton()
	{
		if (member is null)
			throw new NullReferenceException("Member is null!");

		IEnumerable<Loan>? memberLoans = await loanService.GetAllLoansByMemberNumberAsync(member.ReaderNumber);

		if (memberLoans?.Any() != true)
		{
			await libraryMemberService.DeleteLibraryMemberAsync(Id);
			navManager.NavigateTo("library-members");
		}
		else
		{
			await ShowAlert("Cannot delete user with active loans!");
		}
	}

	private async Task ShowAlert(string message)
	{
		await jsRuntime.InvokeVoidAsync("alert", message);
	}
}
